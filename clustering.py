from janome.tokenizer import Tokenizer
from gensim.models import Word2Vec
from sklearn.cluster import DBSCAN
import matplotlib
import matplotlib.pyplot as plt
import numpy as np

#入力データ
text1 = """
ある日、小さな町で一人の青年、ケンジが暮らしていました。彼は平凡な日常に飽き飽きしていて、何か特別な冒険を求めていました。
ある晩、ケンジは星空を眺めていると、一風変わった流れ星が空を横切りました。その瞬間、彼は奇妙な感覚に包まれました。次の瞬間、彼は目を覚ますと、自分が見知らぬ場所にいることに気づきました。
彼が辿り着いたのは、不思議な魔法の森でした。森の中には不思議な生き物や魔法の存在が溢れ、ケンジは驚きと興奮で胸が膨らみました。
そんな中、ケンジは小さな妖精に出会いました。妖精はケンジに魔法の力を与えることができると言いました。ケンジは迷わず力を受け取り、魔法使いとしての冒険が始まりました。
ケンジは魔法の使い方を学びながら、森の中でさまざまな困難に立ち向かいました。彼は呪文を唱えて岩を移動させ、樹木を元気づけることができました。彼の魔法の力はますます成長し、彼は森を守るために奮闘しました。
しかし、ケンジは森に闇の気配が忍び寄っていることに気づきました。邪悪な魔法使いが森を乗っ取ろうとしていたのです。彼は仲間の妖精と協力し、魔法のバトルに挑みました。
壮絶な戦いの末、ケンジは魔法使いを打ち倒し、森を守り抜きました。彼の勇敢さと決断力は妖精たちや森の住人たちに感謝され、彼は森の守護者として賞賛されました。
その後、ケンジは町に戻りましたが、彼の冒険の経験は彼の人生に大きな影響を与えました。彼は日常の中でも魔法の力を使い、人々の助けとなる存在となりました。彼の冒険譚は町中に広まり、多くの人々が彼の勇気と魔法の力に憧れました。
ケンジは自身の冒険を振り返りながら、夢と冒険心を忘れずにいることを心に誓ったのでした。
"""

text2 = """
美しい自然の中で、四季折々の風景が目に飛び込んでくる。春の訪れとともに、花々が色鮮やかに咲き誇り、桜の花びらが舞い散る様子は、まるで絵画の中にいるような感覚を与えてくれる。夏の日差しは熱く、空は青く広がり、木々の葉っぱは深い緑色に輝き、そよ風になびく姿が涼やかさを感じさせる。秋が訪れると、紅葉が山々を彩り、色とりどりの落ち葉が地面を覆い尽くす様子は、まるで魔法にかけられたような美しさだ。そして冬の訪れとともに、雪が降り積もり、一面が白銀の世界に包まれる。雪の結晶がキラキラと輝き、寒さに凍える中でも、心は温かさで満たされる。
人々の営みも多様である。街の中心では、高層ビルが立ち並び、忙しない人々が行き交う。交差点では車や自転車が交差し、信号の合図で一斉に動き出す様子は、都会の活気を感じさせる。街角のカフェでは、香り高いコーヒーが淹れられ、人々は友人や恋人とのひと時を楽しんでいる。商店街では、色とりどりの商品が並び、人々が賑わいを見せる。公園では、子供たちが元気に遊び、家族や友人が集い、笑顔があふれる。
学校や大学では、知識や技術を学び、若者たちは夢に向かって努力する。教室では生徒たちが真剣に授業に取り組み、先生は知識を伝えることに情熱を注ぐ。学生たちは図書館で本を読み、研究室で実験に取り組み、知識を追求する喜びを感じている。
さらには科学や技術の進歩も目覚ましい。研究室では最新の技術や装置が駆使され、新たな発見や発明が行われている。宇宙探査は遥かな宇宙への探求心を象徴し、新たな未知の世界を開拓する挑戦となっている。
このような多様な要素が絡み合い、人々の生活を彩る。名詞の数々がそれぞれの役割を果たし、世界を豊かにしているのだ。
"""

text3 = """
青い空に広がる雲が、風に揺れながら移り変わる様子を見ていると、心が穏やかになる。
花畑の中で咲く一輪の紅いバラが、微風に揺れて香りを漂わせている。
川の流れには、きらきらと光る太陽の光が反射して、まるでダイヤモンドの輝きのように見える。
森の奥深くには、様々な動物たちが住み、小さな鳥たちの囀りが耳に心地よく響く。
人々の笑顔や優しい言葉が交わされる場所では、温かな空気が広がり、幸福感が満ち溢れている。
星が瞬きながら夜空に輝く姿は、宇宙の神秘さを感じさせる。
"""


#形態素解析
t = Tokenizer()
tokens = t.tokenize(text3)
dic = {}
for token in tokens:
    if token.part_of_speech.startswith("名詞"):
        if dic == {}:
            word = token.base_form
            dic[word] = 1
        else:
            word = token.base_form
            if word in dic:
                dic[word] += 1
            else:
                dic[word] = 1
words = []#品詞分解した名詞のリスト
for k, v in dic.items():
    words.append(k)


#word2vec
vectors = []#Lesson13のdata_XY_Tと同じ形式、各単語ベクトルを格納するリスト
model = Word2Vec([words], vector_size = 2, min_count = 1)#二次元のモデル、出現頻度が〇以下
for word in words:
    vector = model.wv[word]#wordの単語ベクトル
    vectors.append(vector)
vectors_x = []
vectors_y = []
for v in range(len(vectors)):
    vectors_x.append(vectors[v][0])
    vectors_y.append(vectors[v][1])


#クラスタリング
pred = DBSCAN(eps = 0.1, min_samples = 2).fit_predict(vectors)#半径、クラスタを構成するための最小の点の数


#matplotlib
fig, ax = plt.subplots()
sc = ax.scatter(vectors_x, vectors_y, s = 3, c = pred)
def on_move(event):
    if event.inaxes == ax:
        x, y = event.xdata, event.ydata
        for vc in range(len(vectors)):
            if ((float(x-0.01) < float(vectors[vc][0])) and (float(x+0.01) > float(vectors[vc][0]))):
                if((float(y-0.01) < float(vectors[vc][1])) and (float(y+0.01) > float(vectors[vc][1]))):
                    print(f"単語: {words[vc]}, 座標: x={x}, y={y}")
fig.canvas.mpl_connect('motion_notify_event', on_move)
plt.xlim(-1, 1)
plt.ylim(-1, 1)
plt.show()